"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.brandController = void 0;
const writeLog_1 = require("../logger/writeLog");
const brand_service_1 = require("../service/brand.service");
const product_service_1 = require("../service/product.service");
const respFormat_1 = __importDefault(require("../utils/response/respFormat"));
class BrandController {
    async getByBrandName(req, resp) {
        try {
            const name = req?.params?.name;
            const brand = await brand_service_1.brandService.getBrandByName(name);
            if (brand) {
                resp.status(200);
                resp.send((0, respFormat_1.default)(brand, "Brand Found", true));
            }
            else {
                resp.status(202);
                resp.send((0, respFormat_1.default)(brand, "Brand not Found by given id", true));
            }
        }
        catch (error) { }
    }
    async getAllProductsByBrand(req, resp) {
        writeLog_1.apiWriteLog.info("getAllProductsByBrand ", req.query);
        const products = await product_service_1.productService.getAllProductBrand(req.query);
        if (products) {
            resp.status(200);
            resp.send((0, respFormat_1.default)(products, `${products?.length} Products By Brand found`, true));
        }
        else {
            resp.status(200);
            resp.send((0, respFormat_1.default)(null, "Product not found by Brand"));
        }
    }
    async getAll(req, resp) {
        writeLog_1.apiWriteLog.info("Test writ file", { test: "Object is write" });
        const brands = await brand_service_1.brandService.getAllBrand();
        if (brands) {
            resp.status(200);
            resp.send((0, respFormat_1.default)(brands, "Brand found", true));
        }
        else {
            resp.status(200);
            resp.send((0, respFormat_1.default)(brands, "Brand not found"));
        }
    }
    async getById(req, resp) {
        const id = parseInt(req?.params?.id);
        const brand = await brand_service_1.brandService.getBrandById(id);
        if (brand) {
            resp.status(200);
            resp.send((0, respFormat_1.default)(brand, "Brand Found", true));
        }
        else {
            resp.status(202);
            resp.send((0, respFormat_1.default)(brand, "Brand not Found by given id", true));
        }
    }
    async add(req, resp) {
        console.log("Brand Add Request Body ", req.body);
        const brandReq = req.body;
        console.log("After Partial Brand Add Request Body ", brandReq);
        const { name, description, tagLine, logoUrl, website } = req.body;
        try {
            const nBrand = await brand_service_1.brandService.save({
                name,
                description,
                tagLine,
                logoUrl,
                website,
            });
            console.log("Brand added Response ", nBrand);
            resp.status(201);
            resp.send((0, respFormat_1.default)(nBrand, "Brand Save Or Added", true));
        }
        catch (error) {
            resp.status(202);
            resp.send((0, respFormat_1.default)(null, "Brand Added failed", false));
        }
    }
    async update(req, resp) {
        const { id, name, description, tagLine, logoUrl, website, publicId } = req.body;
        const brand = {
            id,
            publicId,
            name,
            description,
            tagLine,
            logoUrl,
            website,
            products: [],
            news: [],
        };
        const updateBrand = await brand_service_1.brandService.updateBrand(brand);
        if (updateBrand !== undefined && updateBrand !== null) {
            resp.status(202);
            resp.send((0, respFormat_1.default)(updateBrand, "Brand updated", true));
        }
        else {
            resp.status(202);
            resp.send((0, respFormat_1.default)(null, "Brand update failed", false));
        }
    }
    async delete(req, resp) {
        const { id } = req.params;
        const intId = parseInt(id);
        if (intId > 0) {
            const deleteResp = await brand_service_1.brandService.deleteBrand(intId);
            if (deleteResp) {
                resp.status(202);
                resp.send((0, respFormat_1.default)(deleteResp, "Brand deleted ", true));
            }
        }
        resp.status(202);
        resp.send((0, respFormat_1.default)(null, "Brand delete failed", false));
    }
}
exports.brandController = new BrandController();
//# sourceMappingURL=data:application/json;base64,