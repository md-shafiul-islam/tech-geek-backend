"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.metadatController = void 0;
const writeLog_1 = require("../logger/writeLog");
const metadata_service_1 = require("../service/metadata.service");
const respFormat_1 = __importDefault(require("../utils/response/respFormat"));
class MetadatController {
    async getAll(req, resp) {
        try {
            const metadata = await metadata_service_1.metadataService.getAll();
            if (metadata) {
                resp.status(200);
                resp.send((0, respFormat_1.default)(metadata, "metadata found", true));
            }
            else {
                resp.status(202);
                resp.send((0, respFormat_1.default)(metadata, "metadata not found"));
            }
        }
        catch (error) {
            writeLog_1.apiWriteLog.error("metadata getAll Error ", error);
            resp.status(202);
            resp.send((0, respFormat_1.default)(null, "metadata not found"));
        }
    }
    async getById(req, resp) {
        const id = parseInt(req?.params?.id);
        try {
            const metadata = await metadata_service_1.metadataService.getById(id);
            if (metadata) {
                resp.status(200);
                resp.send((0, respFormat_1.default)(metadata, "metadata found", true));
            }
            else {
                resp.status(202);
                resp.send((0, respFormat_1.default)(metadata, "metadata not found"));
            }
        }
        catch (error) {
            writeLog_1.apiWriteLog.error("metadata getById Error ", error);
            resp.status(202);
            resp.send((0, respFormat_1.default)(null, "metadata not found"));
        }
    }
    async add(req, resp) {
        const { name, content } = req.body;
        try {
            const metadata = await metadata_service_1.metadataService.save({
                name,
                content,
            });
            resp.status(201);
            resp.send((0, respFormat_1.default)(metadata, " Save Or Added", true));
        }
        catch (error) {
            writeLog_1.apiWriteLog.error("metadata Add Error ", error);
            resp.status(202);
            resp.send((0, respFormat_1.default)(null, " metadata Add failed", false));
        }
    }
    async update(req, resp) {
        const { id, name, content } = req.body;
        try {
            const intId = parseInt(id);
            const metadata = {
                id: intId,
                name,
                content,
            };
            const update = await metadata_service_1.metadataService.update(metadata);
            if (update !== undefined && update !== null) {
                resp.status(202);
                resp.send((0, respFormat_1.default)(update, "metadata updated", true));
            }
            else {
                resp.status(202);
                resp.send((0, respFormat_1.default)(null, "metadata update failed", false));
            }
        }
        catch (error) {
            writeLog_1.apiWriteLog.error("metadata Update Error, ", error);
            resp.status(202);
            resp.send((0, respFormat_1.default)(null, "metadata update failed", false));
        }
    }
    async delete(req, resp) {
        const { id } = req.params;
        try {
            const intId = parseInt(id);
            if (intId > 0) {
                const deleteResp = await metadata_service_1.metadataService.delete(intId);
                if (deleteResp) {
                    resp.status(202);
                    resp.send((0, respFormat_1.default)(deleteResp, "metadata deleted ", true));
                }
            }
        }
        catch (error) {
            writeLog_1.apiWriteLog.error("metadata Delete Error ", error);
            resp.status(202);
            resp.send((0, respFormat_1.default)(null, "metadata delete failed", false));
        }
    }
}
exports.metadatController = new MetadatController();
//# sourceMappingURL=data:application/json;base64,